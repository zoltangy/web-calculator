{"version":3,"sources":["fonts/Display.ttf","GlobalStyle.js","components/ModeDisplay.js","components/Display.js","components/Button.js","App.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","myFont","StyledModeDisplay","styled","p","ModeDisplay","props","text","formulaLogic","id","StyledDisplay","StyledAggregateDisplay","Display","aggregate","display","StyledButton","button","doubleX","css","Button","onClick","e","handleClick","type","target","innerHTML","StyledApp","div","Calculator","init","tempResult","tempValue","reducer","state","action","slice","test","isNaN","Number","operand","replace","includes","math","eval","toString","Error","match","p1","immediateLogic","App","useReducer","dispatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d0aad32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Display.6f15c220.ttf\";","import { createGlobalStyle } from \"styled-components\";\r\nimport myFont from \"./fonts/Display.ttf\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @font-face {\r\n    font-family: 'Display';\r\n    src: url(${myFont}) format('truetype');\r\n    font-weight: normal;\r\n  }\r\n\r\n  html {\r\n  box-sizing: border-box;\r\n  }\r\n\r\n  *, *:before, *:after {\r\n  box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    background-color: #8fb3a6;\r\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  }\r\n\r\n\r\n\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledModeDisplay = styled.p`\r\n  margin: 0px;\r\n  width: 100%;\r\n  height: calc((100% / (7 * 2)));\r\n  font-family: \"Display\", sans-serif;\r\n  font-weight: normal;\r\n  color: red;\r\n  background-color: #132133;\r\n`;\r\n\r\nconst ModeDisplay = props => {\r\n  let text = props.formulaLogic\r\n    ? \"Mode: Formula logic\"\r\n    : \"Mode: Immediate execution logic\";\r\n  return <StyledModeDisplay id=\"modeDisplay\">{text}</StyledModeDisplay>;\r\n};\r\n\r\nexport default ModeDisplay;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDisplay = styled.p`\r\n  margin: 0px;\r\n  width: 100%;\r\n  height: calc(((100% / 7) * 1.5) / 3 * 2);\r\n  font-family: \"Display\", sans-serif;\r\n  font-weight: normal;\r\n  color: red;\r\n  text-align: right;\r\n\r\n  background-color: #132133;\r\n`;\r\n\r\nconst StyledAggregateDisplay = styled.p`\r\n  margin: 0px;\r\n  width: 100%;\r\n  height: calc(((100% / 7) * 1.5) / 3);\r\n  font-family: \"Display\", sans-serif;\r\n  font-weight: normal;\r\n  font-style: italic;\r\n  color: red;\r\n  text-align: right;\r\n  background-color: #132133;\r\n`;\r\n\r\nconst Display = props => {\r\n  return (\r\n    <>\r\n      <StyledAggregateDisplay id=\"aggregateDisplay\">\r\n        {props.aggregate}\r\n      </StyledAggregateDisplay>\r\n      <StyledDisplay id=\"display\">{props.display}</StyledDisplay>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  width: calc(100% / 4);\r\n  ${props =>\r\n    props.doubleX &&\r\n    css`\r\n      width: calc(100% / 2);\r\n    `};\r\n\r\n  height: calc(100% / 7);\r\n  background-color: #1a455c;\r\n  color: #dce3ca;\r\n`;\r\n\r\nconst Button = props => {\r\n  return (\r\n    <StyledButton\r\n      id={props.id}\r\n      doubleX={!!props.doubleX}\r\n      onClick={e => {\r\n        props.handleClick({ type: e.target.innerHTML });\r\n      }}\r\n    >\r\n      {props.text}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useReducer } from \"react\";\nimport styled from \"styled-components\";\nimport { Normalize } from \"styled-normalize\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport ModeDisplay from \"./components/ModeDisplay\";\nimport Display from \"./components/Display\";\nimport Button from \"./components/Button\";\nimport math from \"mathjs-expression-parser\";\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Calculator = styled.div`\n  border: 1px solid black;\n  width: 320px;\n  height: 455px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, init());\n\n  return (\n    <StyledApp>\n      <Calculator>\n        <Normalize />\n        <GlobalStyle />\n        <ModeDisplay formulaLogic={state.formulaLogic} />\n        <Display\n          display={state.display}\n          aggregate={state.aggregate + state.tempValue}\n        />\n        <Button id=\"clear\" text=\"AC\" handleClick={dispatch} doubleX />\n        <Button id=\"mode\" text=\"Mode\" handleClick={dispatch} />\n        <Button id=\"divide\" text=\"/\" handleClick={dispatch} />\n\n        <Button id=\"seven\" text=\"7\" handleClick={dispatch} />\n        <Button id=\"eight\" text=\"8\" handleClick={dispatch} />\n        <Button id=\"nine\" text=\"9\" handleClick={dispatch} />\n        <Button id=\"multiply\" text=\"X\" handleClick={dispatch} />\n\n        <Button id=\"four\" text=\"4\" handleClick={dispatch} />\n        <Button id=\"five\" text=\"5\" handleClick={dispatch} />\n        <Button id=\"six\" text=\"6\" handleClick={dispatch} />\n        <Button id=\"subtract\" text=\"-\" handleClick={dispatch} />\n\n        <Button id=\"one\" text=\"1\" handleClick={dispatch} />\n        <Button id=\"two\" text=\"2\" handleClick={dispatch} />\n        <Button id=\"three\" text=\"3\" handleClick={dispatch} />\n        <Button id=\"add\" text=\"+\" handleClick={dispatch} />\n\n        <Button id=\"zero\" text=\"0\" handleClick={dispatch} doubleX />\n        <Button id=\"decimal\" text=\".\" handleClick={dispatch} />\n        <Button id=\"equals\" text=\"=\" handleClick={dispatch} />\n      </Calculator>\n    </StyledApp>\n  );\n}\n\nfunction init(formulaLogic = true) {\n  return {\n    aggregate: \"\",\n    display: \"0\",\n    formulaLogic: formulaLogic,\n    tempResult: \"\",\n    tempValue: \"\"\n  };\n}\n\nfunction reducer(state, action) {\n  if (action.type === \"Mode\") {\n    return init(!state.formulaLogic);\n  }\n\n  if (action.type === \"AC\") {\n    return init(state.formulaLogic);\n  }\n\n  if (state.formulaLogic) {\n    return formulaLogic(state, action);\n  } else {\n    return immediateLogic(state, action);\n  }\n}\n\nfunction formulaLogic(state, action) {\n  var display = state.display;\n  var aggregate = state.aggregate;\n\n  // new calc or result carry over\n  if (aggregate.slice(-1) === \"=\" && action.type !== \"=\") {\n    let reg = /(\\+|-|X|\\/)/;\n    if (reg.test(action.type)) {\n      // previous result should carry over for new calculation\n      aggregate = display;\n    } else {\n      // start new calculation\n      aggregate = \"\";\n    }\n    display = \"0\";\n  }\n\n  // handling numbers\n  if (!isNaN(Number(action.type))) {\n    display = display.replace(/^[+-/*]+/, \"\").replace(/^0$/, \"\") + action.type;\n    aggregate =\n      aggregate\n        .replace(/([-+*/]+)0$/, (match, p1) => {\n          return p1;\n        })\n        .replace(/^0(?!\\.)/, \"\") + action.type;\n  } else {\n    // handling operands, '.', '='\n    switch (action.type) {\n      case \"+\":\n      case \"/\":\n      case \"X\":\n        let operand = action.type === \"X\" ? \"*\" : action.type;\n        // Overwrite operand when pressing one after another\n        aggregate = aggregate.replace(/[+\\-*/.]+$/, \"\") + operand;\n        display = operand;\n        break;\n\n      case \"-\":\n        // pushing multiple '-' should be ignored\n        if (aggregate.slice(-1) !== \"-\") {\n          aggregate += action.type;\n          display = action.type;\n        }\n        break;\n\n      case \".\":\n        // ensure only one decimal per number\n        if (!display.includes(\".\")) {\n          // add implicit zero when decimal pushed after operand or after init\n          if (isNaN(Number(aggregate.slice(-1))) || aggregate === \"\") {\n            aggregate += \"0\" + action.type;\n            display = \"0\" + action.type;\n          } else {\n            // normal case, just add decimal\n            aggregate += action.type;\n            display += action.type;\n          }\n        }\n        break;\n\n      case \"=\":\n        // pushing '=' more than once or at init should be ignored\n        if (aggregate.slice(-1) !== \"=\" && aggregate !== \"\") {\n          // remove unfinished operand\n          aggregate = aggregate.replace(/[+\\-*/.]+$/, \"\");\n          display = math.eval(aggregate).toString();\n          aggregate += action.type;\n        }\n        break;\n\n      default:\n        throw new Error();\n    }\n  }\n  return {\n    ...state,\n    display: display,\n    aggregate: aggregate\n  };\n}\n\nfunction immediateLogic(state, action) {\n  var display = state.display;\n  var aggregate = state.aggregate;\n  var tempResult = state.tempResult;\n  var tempValue = state.tempValue;\n\n  // new calc or result carry over\n  if (tempValue.slice(-1) === \"=\" && action.type !== \"=\") {\n    let reg = /(\\+|-|X|\\/)/;\n    if (reg.test(action.type)) {\n      // previous result should carry over for new calculation\n      aggregate = display;\n      tempResult = display;\n    } else {\n      // start new calculation\n      aggregate = \"\";\n      display = \"0\";\n      tempResult = \"\";\n    }\n    tempValue = \"\";\n  }\n\n  // handling numbers\n  if (!isNaN(Number(action.type))) {\n    tempValue =\n      tempValue\n        .replace(/([-+*/]+)0$/, (match, p1) => {\n          return p1;\n        })\n        .replace(/^0(?!\\.)/, \"\") + action.type;\n    display =\n      tempResult === \"\" ? \"\" : math.eval(tempResult + tempValue).toString();\n  } else {\n    // handling operands, '.', '='\n    switch (action.type) {\n      case \"+\":\n      case \"/\":\n      case \"X\":\n        let operand = action.type === \"X\" ? \"*\" : action.type;\n        // Overwrite operand when pressing one after another\n        if (isNaN(Number(tempValue.slice(-1)))) {\n          tempValue = tempValue.replace(/[+\\-*/.]+$/, \"\");\n        } else {\n          tempResult = display === \"\" ? tempValue : display;\n          aggregate += tempValue;\n          tempValue = \"\";\n        }\n        tempValue += operand;\n        display = tempResult;\n        break;\n\n      case \"-\":\n        // pushing multiple '-' should be ignored\n        if (tempValue.slice(-1) !== \"-\") {\n          if (!isNaN(Number(tempValue.slice(-1)))) {\n            tempResult = display === \"\" ? tempValue : display;\n            aggregate += tempValue;\n            tempValue = \"\";\n          }\n          tempValue += action.type;\n          display = tempResult;\n        }\n        break;\n\n      case \".\":\n        // ensure only one decimal per number\n        if (!tempValue.includes(\".\")) {\n          // add implicit zero when decimal pushed after operand or after init\n          if (isNaN(Number(tempValue.slice(-1))) || tempValue === \"\") {\n            tempValue += \"0\" + action.type;\n          } else {\n            tempValue += action.type;\n          }\n        }\n        break;\n\n      case \"=\":\n        // pushing '=' more than once or at init should be ignored\n        if (tempValue.slice(-1) !== \"=\" && aggregate !== \"\") {\n          // remove unfinished operand\n          if (isNaN(Number(tempValue.slice(-1)))) {\n            tempValue = tempValue.slice(0, -1);\n          }\n          tempResult = display === \"\" ? tempValue : display;\n          aggregate += tempValue;\n          tempValue = action.type;\n          display = tempResult;\n        }\n        break;\n\n      default:\n        throw new Error();\n    }\n  }\n  return {\n    ...state,\n    display: display,\n    aggregate: aggregate,\n    tempResult: tempResult,\n    tempValue: tempValue\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}